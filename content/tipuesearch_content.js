var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 計算機程式 \n 示範網站:  https://mde.tw/cp_demo \n 示範倉儲:  https://github.com/mdecycu/cp_demo \xa0 \n 課程評分: \n 學習心得報告 (60%)  - MS Teams 線上參與， 6人一組 每三週發表學習心得。 \n w3、w7、w10、w14、w17、w18 \n 學習心得報告主題: \n w3: 什麼是 git, GitHub, gist 與 cmsimde? 如何使用這些工具？為什麼要使用這些工具？ ( 動態模擬 ) \n w7: Brython 是什麼？如何在瀏覽器配置 Brython 環境？ Brython 能做什麼？ ( Brython ,  Examples ) \n w10: 如何在瀏覽器中模擬機器人作動？ ( 機器人作動 ) \n w14: 在瀏覽器中模擬機器人作動的目的是什麼？ ( otto_robot.7z ,\xa0 Plotter ,\xa0 open_duck_mini.7z  , https://webots.cloud/AcTNYs0 ) \n w17 ( 1b 採 Youtube 影片簡報 ): 計算機程式課程學到了什麼？ \n w18: 課程總結 \n 個人與分組網站維護 (40%)  - 每週至少兩次推送與課程進度相關的學習內容與心得。 \n w9 期中自評、w18 期末自評', 'tags': '', 'url': 'About.html'}, {'title': 'Project', 'text': '既存技術: \n https://github.com/scrum-1/respysive-slide \n 專案簡介：非同步分散式 Reveal.js 協同簡報編輯系統 \n 各學員利用\xa0 https://github.com/fbxyz/respysive-slide \xa0模組，以位於 downloads 目錄的\xa0 reveal_file.py \xa0建立簡報。( 簡報結果 ) \n 各學員進行協同倉儲內容編輯時，可以先將版本推送至個人倉儲分支，待階段性內容完成後，再設法與主分支或其他測試用分支進行合併。若合併之版本內容有衝突(同位置的新舊版本內容取捨)，則必須設法解決衝突內容後，再進行後續的新增、提交與推送。', 'tags': '', 'url': 'Project.html'}, {'title': 'Python', 'text': 'Python 程式教材 \xa0(中文) \n 透過\xa0 https://mde.tw/cp2025/content/Robot_ex.html \xa0學習 Python 程式語法。 \n Python 基本語法:  Python essential \xa0(英文，只能在校網擷取) \n Python 變數宣告原則: \n 在 Python 中，變數宣告（Variable Declaration）相較於其他語言（如 Java 或 C++）來得簡單，因為 Python 是動態型別語言。以下是 Python 宣告變數的原則與最佳實踐： \n 一、不需明確指定型別 \n Python 是動態型別語言，你不需要指定變數型別 ，解譯器會根據賦值自動判斷。 \n x = 10        # 整數\nname = "Amy"  # 字串\npi = 3.14     # 浮點數\n \n 二、變數名稱命名規則 \n 合法命名： 可以包含字母、數字、底線（_） 不能以數字開頭 不能使用 Python 保留的關鍵字(35個) : \n [\'False\', \'None\', \'True\', \'and\', \'as\', \'assert\', \'async\', \'await\', \'break\', \'class\', \'continue\', \' def \', \'del\', \'elif\', \' else \', \'except\', \'finally\', \' for \', \'from\', \'global\', \' if \', \' import \', \'in\', \'is\', \'lambda\', \'nonlocal\', \'not\', \'or\', \'pass\', \'raise\', \'return\', \'try\', \'while\', \'with\', \'yield\'] \n 利用 keyword 模組， 列出 Python 所保留的關鍵字 : \n import keyword\n\n# 印出關鍵字清單\nprint("Python 保留關鍵字有：")\nprint(keyword.kwlist)\n\n# 印出總數\nprint("\\n關鍵字總數：", len(keyword.kwlist)) \n 三、使用有意義的變數名稱 \n 例如: grid_width = 10 \n 四、遵守 Python 命名慣例（ PEP 8 ） \n 小寫 + 底線 用於變數和函數名稱：total_price 全大寫 用於常數：MAX_SIZE 大駝峰式（PascalCase） 用於類別名稱：StudentProfile \n 五、Python 變數名稱區分大小寫 \n length 與 Length 是兩個不同的變數名稱 \n 六、變數可重新指派不同型別（動態型別特性） \n x = 100       # 整數\nx = "hello"   # 變成字串\n \n 七、可同時宣告多個變數（多重賦值） \n a, b, c = 1, 2, 3\nx = y = z = 0  # 所有變數都為 0\n \n \n \n 有關 w3 簡報 \n 1a_w3_about_presentation.txt \n 先處理 奇數正方形網格區域 ，讓機器人走過每一格:  執行結果 。 \n 針對 長方形網格區域 ，讓機器人也能走過每一格:  執行結果 。 \n \n w3: 什麼是 git, GitHub, gist 與 cmsimde? 如何使用這些工具？為什麼要使用這些工具？ \n \n 原始提問: 下個禮拜我們這一組有六位組員，被要求要上台報告有關計算機程式課程的學習心得，題目是:w3: 什麼是 git，GitHub，gist 與 cmsimde? 如何使用這些工具？為什麼要使用這些工具？, 上課時老師只稍微說明一下，但要我們自己找資料聯席，並且六人逐一上台報告心得， 請用大一新生的程度，幫我們這六位組員準備講稿,並且準備六個人分別要上台展示的指令及內容, 講稿請詳細解說, 並列出參考網站來源, 非常感謝。 要求修飾提問稿: 請幫我們將以下的文字稍微整理一下, 讓他比較通順易懂: 下個禮拜我們這一組有六位組員，被要求要上台報告有關計算機程式課程的學習心得，題目是:w3: 什麼是 git，GitHub，gist 與 cmsimde? 如何使用這些工具？為什麼要使用這些工具？, 上課時老師只稍微說明一下，但要我們自己找資料聯席，並且六人逐一上台報告心得， 請用大一新生的程度，幫我們這六位組員準備講稿,並且準備六個人分別要上台展示的指令及內容, 講稿請詳細解說, 並列出參考網站來源, 非常感謝。 結果: 下個禮拜我們組有六位組員，會上台報告計算機程式課程的學習心得。報告的題目是：「W3: 什麼是 Git、GitHub、Gist 和 CMSIMDE？如何使用這些工具？為什麼要使用這些工具？」老師在課堂上簡單提過這些工具，但並沒有深入講解，並且要求我們自己搜尋資料，準備報告內容。我們的報告會分成六部分，每位組員負責介紹一個主題，逐一上台展示。 因此，請幫我們為六位組員準備講稿，內容要符合大一新生的理解程度，並且每個人要有具體的指令展示與解說。希望講稿能詳細說明這些工具的基本概念、操作方法及為什麼我們需要使用它們，並附上參考網站來源。 感謝你的幫忙！ \n 其他相關提問: \n 請將以下的 markdown 轉為 html, 其中的 head 標註請用 h4 表示, 不要使用 h3, h2 或 h1。 \n 請再更詳細說明每一個重點，並且列出能直接在電腦上邊操作邊說明的內容，以及操作步驟，還有操作展示的目的。 \n 回覆內容請用 html 表示，而 head 標註請用 h4 表示, 不要使用 h3, h2 或 h1。 \n 請詳細說明，上述的議題與操作流程跟計算機程式課程有甚麼關係?使用這些工具有甚麼優點?若不使用又會怎樣? \n \n 參考回覆: \n 這是一次很好的學習機會，能夠深入了解 Git、GitHub、Gist 和 CMSIMDE 的使用和意義，並且學會如何在報告中表達這些技術對程式設計的影響。接下來，我會為你們準備一個詳細的講稿，並且安排好每位組員需要上台展示的內容。每個人的講稿會著重於解釋和展示基本概念與操作。 \n 整體講稿大綱： \n \n 組員 1：什麼是 Git？ \n 組員 2：Git 的基本命令與操作 \n 組員 3：什麼是 GitHub？ \n 組員 4：如何使用 GitHub 進行協作 \n 組員 5：什麼是 Gist？ \n 組員 6：CMSIMDE 和為什麼要使用 Git、GitHub 和 Gist \n \n 1. 組員 1：什麼是 Git？ \n 講稿內容： \n 大家好，今天我將介紹 Git。Git 是一個分佈式版本控制系統（Version Control System, VCS），由 Linus Torvalds（Linux 的創始人）開發。它主要用來追蹤程式碼的變更，並且能夠幫助多人協作開發同一個專案。 \n \n 版本控制：  Git 讓你能夠對每次程式碼的變動進行記錄和管理，並且隨時回到歷史版本。這對於多人協作開發來說非常重要，因為每個人都能夠清楚地知道自己和別人對程式碼的修改。 \n 分佈式：  Git 是分佈式的，這意味著每個開發者的電腦上都有一份完整的程式碼庫。即使離線也可以進行編輯和提交，後續再與其他開發者同步。 \n \n 參考資料： \n \n Git 官方網站 \n 簡介：Git 是什麼？ \n \n \n 2. 組員 2：Git 的基本命令與操作 \n 講稿內容： \n 接下來，我將介紹 Git 的基本命令和操作。這些命令幾乎是每個程式開發者日常必學的。 \n \n 初始化 Git 倉庫（初始化 repository）：   git init  這個命令會創建一個新的 Git 倉庫，用來追蹤程式碼變更。 \n 檢查狀態：   git status  用來檢查當前的版本控制狀態，例如哪些檔案已被修改、哪些尚未加入 Git 追蹤。 \n 添加文件到版本控制：   git add <檔案名>  把修改的文件加入 Git 追蹤，這樣下一次提交時，Git 會記錄這些變更。 \n 提交變更：   git commit -m "提交訊息"  用來將變更提交到本地的 Git 倉庫中，並附上描述這次修改的訊息。 \n 查看提交歷史：   git log  用來查看所有提交的歷史紀錄。 \n \n 參考資料： \n \n Git 入門指南 \n Git 常用命令 \n \n \n 3. 組員 3：什麼是 GitHub？ \n 講稿內容： \n GitHub 是一個基於 Git 的雲端代碼託管平台。它可以讓開發者將本地的 Git 倉庫推送到雲端，並與其他人共享代碼。GitHub 使得程式碼存儲、協作和版本控制變得更加簡單和高效。 \n \n GitHub 的主要功能： \n \n 代碼托管：  GitHub 提供免費的代碼托管服務，可以讓開發者將程式碼儲存在雲端，並且輕鬆與他人共享。 \n 協作功能：  開發者可以通過 Fork、Pull Request 等功能來進行協作開發，這對於開源專案尤其重要。 \n 問題追蹤：  GitHub 還有 Issues 功能，可以幫助團隊追蹤和管理程式中的 Bug 或新功能的開發。 \n \n \n 參考資料： \n \n GitHub 官方網站 \n GitHub 入門 \n \n \n 4. 組員 4：如何使用 GitHub 進行協作 \n 講稿內容： \n GitHub 是協作開發的利器。這裡，我們將介紹如何使用 GitHub 進行協作： \n \n 創建一個新的 GitHub 儲存庫（repository）：  在 GitHub 上創建一個新的儲存庫，然後將本地的 Git 倉庫推送到這個儲存庫。   git remote add origin <repository-url>   git push -u origin master \n Fork 和 Pull Request： \n \n Fork：  將他人的專案複製到自己的帳號下，這樣就可以在自己帳號中進行修改。 \n Pull Request：  在修改完成後，通過 Pull Request 提交修改，向原作者請求合併（Merge）你的更改。 \n \n \n 分支管理：  在多人協作的情況下，通常每個開發者會創建自己的分支（branch），在完成開發後再合併（merge）到主分支。 \n \n 參考資料： \n \n GitHub 協作指南 \n 如何創建 Pull Request \n \n \n 5. 組員 5：什麼是 Gist？ \n 講稿內容： \n Gist 是 GitHub 提供的一個簡單的代碼分享和存儲工具，主要用來分享片段代碼或日常的小範例。 \n \n Gist 的特點： \n \n Gist 允許開發者輕鬆分享代碼片段，並且可以選擇是否公開或私密。 \n 每個 Gist 都有一個唯一的 URL，方便分享給他人。 \n 支援版本控制，並且可以對 Gist 進行 Fork 和修改。 \n \n \n 參考資料： \n \n Gist 官方網站 \n 如何使用 Gist \n \n \n 6. 組員 6：CMSIMDE 和為什麼要使用 Git、GitHub 和 Gist \n 講稿內容： \n 最後，我們來談談 CMSIMDE 以及為什麼我們要使用 Git、GitHub 和 Gist。 \n \n CMSIMDE（Content Management System and Integrated Development Environment）：  這是一個綜合的開發環境，旨在幫助開發者管理和開發程式。它融合了內容管理系統和集成開發環境的功能，可以更高效地協作開發和版本管理。 \n 為什麼要使用 Git、GitHub 和 Gist： \n \n 版本控制：  Git 和 GitHub 讓開發者能夠追蹤程式碼的變更，防止程式碼丟失，並且能夠隨時回到舊版本。 \n 協作開發：  GitHub 和 Gist 使得多人協作開發變得更加順利，無論是協同編寫代碼還是討論功能需求，都能在 GitHub 上輕鬆實現。 \n 便於分享：  透過 Gist，開發者能夠迅速分享代碼片段或小範例，這對於學習和交流非常有幫助。 \n \n \n \n 參考資料： \n \n CMSIMDE 介紹 \n GitHub 和 Gist 介紹 \n \n \n 進一步提問，要求補充更多資料: \n 請再更詳細說明每一個重點，並且列出能直接在電腦上邊操作邊說明的內容，以及操作步驟，還有操作展示的目的。 \n 回覆內容請用 html 表示，而 head 標註請用 h4 表示, 不要使用 h3, h2 或 h1。 \n \n 這是一次很好的學習機會，能夠深入了解 Git、GitHub、Gist 和 CMSIMDE 的使用和意義，並且學會如何在報告中表達這些技術對程式設計的影響。接下來，我會為你們準備一個詳細的講稿，並且安排好每位組員需要上台展示的內容。每個人的講稿會著重於解釋和展示基本概念與操作。 \n 整體講稿大綱： \n \n 組員 1：什麼是 Git？ \n 組員 2：Git 的基本命令與操作 \n 組員 3：什麼是 GitHub？ \n 組員 4：如何使用 GitHub 進行協作 \n 組員 5：什麼是 Gist？ \n 組員 6：CMSIMDE 和為什麼要使用 Git、GitHub 和 Gist \n \n 1. 組員 1：什麼是 Git？ \n 講稿內容： \n 大家好，今天我將介紹 Git。Git 是一個分佈式版本控制系統（Version Control System, VCS），由 Linus Torvalds（Linux 的創始人）開發。它的目的是追蹤程式碼的變更，並協助多人協作開發。 \n Git 的兩大特點： \n \n 版本控制：  每次程式碼的變動都會被記錄，並且能夠隨時回到歷史版本。這樣即使有錯誤，也能夠快速恢復程式碼。 \n 分佈式：  每個開發者的電腦上都會有一份完整的程式碼庫，這讓開發者能夠在離線的情況下進行編輯，並在有網路時再進行同步。 \n \n 操作展示： \n 目的：  理解 Git 如何管理程式碼版本並進行變更追蹤。 \n 請依照下列步驟在電腦中實際操作： \n \n 建立一個新的 Git 倉庫： \n 在你的終端機（Terminal）中，創建一個新的資料夾，然後初始化 Git 倉庫： \n mkdir my_project && cd my_project   git init \n 這個命令會創建一個新的 Git 倉庫。 \n \n 查看 Git 狀態： \n 使用命令檢查當前 Git 倉庫的狀態： \n git status \n 這會顯示哪些檔案有變更，但尚未被 Git 追蹤。 \n \n 創建檔案並提交變更： \n 創建一個簡單的檔案： \n echo "Hello, Git!" > hello.txt \n 然後使用以下命令將檔案添加到 Git 追蹤： \n git add hello.txt \n 最後提交變更： \n git commit -m "Add hello.txt" \n \n 2. 組員 2：Git 的基本命令與操作 \n 講稿內容： \n 接下來，我將介紹 Git 的基本命令，這些是開發過程中最常使用的命令。 \n \n git init：  用來初始化一個新的 Git 倉庫。 \n git add：  用來將修改過的檔案添加到 Git 追蹤列表。 \n git commit：  用來提交檔案，將變更保存到版本庫。 \n git status：  查看當前的工作區狀態，顯示檔案是否有變更。 \n git log：  查看提交歷史。 \n \n 操作展示： \n 目的：  熟悉並實際操作 Git 的基本命令。 \n 請依照下列步驟在電腦中進行： \n \n 查看工作區狀態： \n 使用命令檢查當前工作區的狀態： \n git status \n 查看 Git 提交歷史： \n 顯示最近的提交紀錄： \n git log \n 可以使用 `q` 退出日誌查看。 \n \n \n 3. 組員 3：什麼是 GitHub？ \n 講稿內容： \n GitHub 是基於 Git 的代碼託管平台，可以讓開發者將本地的 Git 倉庫上傳到雲端，並與其他人共享代碼。 \n \n 代碼托管：  GitHub 允許免費或付費的方式來儲存你的代碼，並可以方便地與他人協作。 \n 協作功能：  例如 Fork、Pull Request，這些功能使得開發者能夠在開源項目中協作。 \n 問題追蹤：  GitHub 提供 Issues 功能，方便開發團隊追蹤問題和進度。 \n \n 操作展示： \n 目的：  演示如何在 GitHub 上創建和管理倉庫。 \n 請依照下列步驟操作： \n \n 創建 GitHub 倉庫： \n 進入 GitHub 網站，點選 "New Repository" 並創建一個新的倉庫。 \n \n 將本地倉庫推送到 GitHub： \n 在終端機中，執行以下命令： \n git remote add origin https://github.com/yourusername/your-repository.git   git push -u origin master \n \n 4. 組員 4：如何使用 GitHub 進行協作 \n 講稿內容： \n GitHub 使多人協作變得簡單。這裡介紹如何在 GitHub 上協作開發。 \n \n Fork：  將他人的倉庫複製到你的 GitHub 帳號下，這樣你就可以自由修改。 \n Pull Request：  當你完成修改後，向原始倉庫發送 Pull Request 請求合併你的變更。 \n 分支管理：  每個開發者可以創建自己的分支來進行開發，避免直接修改主分支。 \n \n 操作展示： \n 目的：  演示如何使用 GitHub 進行協作開發。 \n 請依照下列步驟操作： \n \n Fork 一個倉庫： \n 在 GitHub 上找到一個開源專案，點選 "Fork" 將其複製到你的帳號。 \n \n 創建 Pull Request： \n 修改 Fork 的倉庫後，點選 "Pull Request" 發送合併請求。 \n \n \n 5. 組員 5：什麼是 Gist？ \n 講稿內容： \n Gist 是 GitHub 提供的一個工具，讓開發者可以分享小片段的代碼或文檔。 \n 操作展示： \n 目的：  演示如何創建和分享 Gist。 \n 請依照下列步驟操作： \n \n 創建 Gist： \n 進入 Gist 網站，點選 "Create Gist"，並粘貼你想分享的代碼。 \n \n 分享 Gist： \n 創建完後，你會獲得一個唯一的 URL，可以將這個 URL 分享給其他人。 \n \n \n 6. 組員 6：CMSIMDE 和為什麼要使用 Git、GitHub 和 Gist \n 講稿內容： \n 這部分將介紹 CMSIMDE 並討論使用 Git、GitHub 和 Gist 的重要性。 \n \n 版本控制：  使用 Git 可以讓開發者記錄代碼的變更並輕鬆回滾。 \n 協作開發：  GitHub 和 Gist 是協作開發的好工具，能讓多人輕鬆協同工作。 \n 簡化分享：  使用 Gist 可以快速分享代碼片段和文件。 \n \n 這些工具對於開發流程非常有幫助，無論是學習、開發還是協作，都能大大提高效率。 \n \n 請詳細說明，上述的議題與操作流程跟計算機程式課程有甚麼關係?使用這些工具有甚麼優點?若不使用又會怎樣? \n Git、GitHub、Gist 和 CMSIMDE 與計算機程式課程的關係 \n 在計算機程式設計課程中，學習如何編寫程式、協作開發、管理程式碼變更，以及有效地共享代碼是非常重要的。Git、GitHub、Gist 和 CMSIMDE 是一些現代開發中不可或缺的工具，它們不僅有助於程式開發過程的管理，還能提高開發效率，促進團隊協作。以下將詳細說明這些工具與計算機程式課程的關係，以及它們的優點，並分析如果不使用這些工具可能帶來的後果。 \n 1. Git 與程式設計課程的關係 \n Git  是一個強大的版本控制工具，主要用來追蹤程式碼的變更，確保開發過程中的每個修改都有記錄，並且能夠隨時回到先前的版本。對於程式設計課程來說，Git 可以幫助學生管理自己的程式碼版本，防止在編寫程式時發生錯誤丟失，並且讓學生能夠在團隊合作中協同開發。 \n 操作流程： \n 目的：  學生使用 Git 來管理自己的程式碼變更和協作開發。 \n \n 初始化本地倉庫： \n 在學生開始編寫程式碼時，使用 `git init` 創建一個本地 Git 倉庫，開始管理程式碼的版本。 \n \n 提交程式碼： \n 每當學生進行了一些變更（如修正錯誤或增加功能），可以使用 `git add` 和 `git commit` 來記錄和保存這些變更。 \n \n 查看變更歷史： \n 學生可以使用 `git log` 查看所有的提交歷史，了解程式碼的變更情況。 \n \n \n 優點： \n \n 版本控制：  Git 允許學生記錄每一次的程式碼變更，並能隨時回到歷史版本，這對於避免錯誤和修改衝突非常重要。 \n 協作開發：  在團隊專案中，Git 使得每個組員都能在自己的工作區域編寫程式碼，並能夠在需要時將自己的變更推送到主倉庫。 \n \n 不使用 Git 的後果： \n \n 程式碼丟失：  若學生不使用 Git，當程式碼出現錯誤或變更不當時，無法輕易回到之前的版本，可能會浪費大量時間來修復錯誤。 \n 難以協作：  團隊協作將變得困難，因為每個人可能會在不同的版本上工作，無法輕鬆合併所有的變更，甚至會導致代碼衝突。 \n \n 2. GitHub 與程式設計課程的關係 \n GitHub  是基於 Git 的雲端代碼託管平台，提供在線存儲和版本控制服務。GitHub 的協作功能使得學生能夠將自己的程式碼上傳至雲端，並且與其他組員共享、協作開發，這對於程式設計課程中的團隊專案開發尤為重要。 \n 操作流程： \n 目的：  學生將本地程式碼推送到 GitHub 上，並通過協作功能進行合作開發。 \n \n 創建 GitHub 倉庫： \n 學生可以在 GitHub 上創建一個新倉庫，並將本地倉庫與之連接，通過 `git remote add` 和 `git push` 把程式碼推送到 GitHub。 \n \n Fork 和 Pull Request： \n 學生可以 Fork 他人的專案，修改後再向原專案發送 Pull Request，請求將修改合併到主專案中。 \n \n \n 優點： \n \n 協作功能：  GitHub 使得學生能夠進行多人協作，並且能夠清晰地管理和合併不同組員的變更。 \n 雲端儲存：  GitHub 提供雲端儲存，學生可以隨時訪問自己的程式碼，並且不需要擔心資料丟失。 \n \n 不使用 GitHub 的後果： \n \n 協作困難：  如果不使用 GitHub，學生之間的程式碼協作將變得繁瑣，難以管理變更，也難以追蹤問題。 \n 無法便捷共享：  學生無法像 GitHub 一樣方便地向他人展示自己的代碼，協作和交流會受到限制。 \n \n 3. Gist 與程式設計課程的關係 \n Gist  是 GitHub 提供的代碼片段分享平台，適合學生分享小範圍的代碼段或程式設計題目的解法。Gist 使得學生能夠輕鬆展示學習過程中的代碼片段或共享一些學習心得。 \n 操作流程： \n 目的：  學生使用 Gist 快速分享代碼片段或小範例。 \n \n 創建 Gist： \n 學生可以將代碼片段粘貼到 Gist 網站，創建公開或私有的 Gist，並將其分享給其他人。 \n \n \n 優點： \n \n 代碼分享：  學生可以輕鬆分享自己的學習代碼片段，這對於同學之間的學習交流非常有幫助。 \n 簡單的版本控制：  Gist 會自動為每個代碼片段建立版本控制，學生可以追蹤代碼的歷史變化。 \n \n 不使用 Gist 的後果： \n \n 難以分享學習成果：  學生如果不使用 Gist，將難以快速分享自己的代碼片段，學習過程中也無法有效地與他人進行交流。 \n 代碼存儲混亂：  代碼可能會散落在不同的地方，難以集中管理和查詢。 \n \n 4. CMSIMDE 與程式設計課程的關係 \n CMSIMDE  是一種綜合開發環境，它融合了內容管理系統和集成開發環境（IDE）的功能，提供一個集中式的開發平台。在程式設計課程中，CMSIMDE 可以幫助學生更高效地開發、管理和協作程式碼。 \n 優點： \n \n 提高開發效率：  CMSIMDE 提供了一個統一的開發環境，學生可以在一個平台上進行編程、調試和版本管理，避免多重工具之間的切換。 \n 集成協作工具：  CMSIMDE 可能包含像 GitHub 等協作工具，幫助學生進行多人協作開發。 \n \n 不使用 CMSIMDE 的後果： \n \n 開發效率低：  如果學生沒有使用 CMSIMDE，他們將需要在多個工具和平台之間切換，這會浪費時間並降低效率。 \n 難以協作：  沒有 CMSIMDE，學生將難以在一個平台上集中管理開發、測試和版本控制，協作會變得更加複雜。 \n', 'tags': '', 'url': 'Python.html'}, {'title': 'Examples', 'text': '\n \n \n \n w5:\xa0 深入理解 機器人行走模擬程式 中的所有 Python 與 Brython 程式用法。 \n 目前頁面已經有一個 div 標註, 其 id 設為 brython_div1, 請多舉幾個 brython browser 模組的 document, html, timer 以及 bind 的範例, 各舉十個範例, 讓我可以交作業.', 'tags': '', 'url': 'Examples.html'}, {'title': 'w5_1', 'text': '在頁面中嵌入 Brython 執行環境: \n editor_embed_brython.txt \n \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n', 'tags': '', 'url': 'w5_1.html'}, {'title': 'Brython', 'text': 'Brython  是一個將  Python  語法編譯為  JavaScript  的工具，能直接在瀏覽器中以  Python  撰寫前端網頁程式。 \n 1 add to 100 機器人巡邏 自由行 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  累加程式開始  \n \n  累加程式結束     機器人巡邏程式開始  \n \n  機器人巡邏程式結束  \n  機器人自由行程式開始  \n \n \n \n  機器人自由行程式結束  \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n', 'tags': '', 'url': 'Brython.html'}, {'title': 'Pyodide3', 'text': 'Pyodide3 則在  Pyodide  與  Pyodide2  頁面架構下，進一步導入  robot_w_world.py ，在既有的水平圍牆  north.png  與垂直圍牆  east.png  檔案之外，加入  carrot.png 、 grass.png  與  pale_grass.png  等圖檔。並且擴充可從 URL 讀進 json 格式的 world 變數功能，以便製作出更多元的場景任務，要求機器人執行。 \n 其中 src URL 變數，可以將網路上的機器人控制程式導入 Pyodide3 頁面外，world URL 變數則可以導入源自  Reeborg  機器人程式所設定的 json 格式場景。 \n 由於 Reeborg 系統中的 png 圖檔均非透明背景， robot_w_world.py \xa0必須利用 HTML 中的 CANVAS，將關鍵的白色背景，以透明的方式顯示。 \n src URL 變數讀進  turn_right 程式 ，而 world URL 變數則讀進  harvest2.json ，執行 結果 。 \n 讀進  harvest3.json , 執行 結果 。 \n \n \n \n version   hello   1 add to 100   機器人巡邏   自由行   numpy_ode \n  Ace Editor Scripts  \n \n \n \n \n \n \n \n \n  Editor 1  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n 從 1 累加到 100 part2: \n 1 add to 100 \n  Editor 2  \n \n Run   Output   清除輸出區   Reload \n \n \n \n \n \n \n', 'tags': '', 'url': 'Pyodide3.html'}]};